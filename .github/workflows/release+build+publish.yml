name: Release + Build + Publish

on:
  push:
    branches:
      - master
    paths:
      - "Cargo.toml"
  workflow_dispatch:


jobs:
  tag:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.create_tag.outputs.name }}
      needs_build: ${{ steps.create_tag.outputs.needs_build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          CARGO_METADATA=$(cargo metadata --format-version 1 --no-deps)
          CARGO_VERSION=$(echo ${CARGO_METADATA} | jq -r '.packages[] | select(.name == "nextver") | .version')

          if [ -z "${CARGO_VERSION}" ]; then
            echo "CARGO_VERSION should not be empty, likely problem with metadata or jq command"
            exit 1
          fi

          echo "Extracted version: ${CARGO_VERSION}"
          echo "::notice title=Cargo Version::${CARGO_VERSION}"
          echo "cargo_version=${CARGO_VERSION}" >> "$GITHUB_OUTPUT"

      # some possibility for race condition here, but not a problem unless we're spamming this action
      - name: Create tag
        env:
          GH_TOKEN: ${{ github.token }}
        id: create_tag
        run: |
          TAG_NAME="v${{ steps.extract_version.outputs.cargo_version }}"
          echo "name=${TAG_NAME}" >> "$GITHUB_OUTPUT"
          echo "::notice title=Tag Name::${TAG_NAME}"

          REF="refs/tags/${TAG_NAME}"
          if git rev-parse -q --verify "${REF}"; then
            NEEDS_BUILD=false
            echo "Tag v$VERSION already exists, skipping release"
          else
            NEEDS_BUILD=true
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a -m "Release ${TAG_NAME}" "${TAG_NAME}"
            git push origin "${TAG_NAME}"
          fi

          echo "::notice title=Needs Build::${NEEDS_BUILD}"
          echo "needs_build=${NEEDS_BUILD}" >> "$GITHUB_OUTPUT"      

# TODO:
  # build on some runners, e.g. ubuntu-latest, macos-latest, windows-latest
  # publish to crates.io
  # publish binaries as assets to github release

  # Note that we just use the rust tooling that exists by default on the runners.
  # See https://github.com/actions/runner-images?tab=readme-ov-file#available-images
  build:
    runs-on: ${{ matrix.os }}
    needs: tag
    if: needs.tag.outputs.needs_build == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
            ext: ""
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            ext: .exe
          - os: macos-latest
            triple: x86_64-apple-darwin
            ext: ""
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.name }}

      - name: Add triple
        run: |
          rustup target add ${{ matrix.triple }}

      - name: Test
        run: cargo test --target ${{ matrix.triple }}

      - name: Build
        run: cargo build --release --target ${{ matrix.triple }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.triple }}-release
          path: target/${{ matrix.triple }}/release/nextver${{ matrix.ext }}

  # release:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Publish to crates.io
  #       run: cargo publish
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  #     - name: Publish to GitHub
  #       run: |
  #         URL=$(gh release create ${TAG_NAME} \
  #           -t "Release ${TAG_NAME}" \
  #           --generate-notes)
  #         NEEDS_BUILD=true
  #         echo "::notice title=Release URL::${URL}"

